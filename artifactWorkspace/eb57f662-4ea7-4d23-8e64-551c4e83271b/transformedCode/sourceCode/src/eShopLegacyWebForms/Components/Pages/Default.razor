@namespace eShopLegacyWebForms.Components.Pages.Default

@page "/"
@rendermode InteractiveServer
@using eShopLegacyWebForms.Models
@using eShopLegacyWebForms.Services
@using eShopLegacyWebForms.ViewModel
@using Microsoft.Extensions.Logging
@using System.Linq
@using Microsoft.AspNetCore.Components.Routing
@inject ICatalogService CatalogService
@inject ILogger<Default> Logger
@inject NavigationManager NavigationManager

<div class="esh-table">
    <p class="esh-link-wrapper">
        <a href="@NavigationManager.GetUriWithQueryParameters("CreateProduct", new Dictionary<string, object>())" class="btn esh-button esh-button-primary">
            Create New
        </a>
    </p>

    @if (Model?.Data == null || !Model.Data.Any())
    {
        <table>
            <tr>
                <td>No data was returned.</td>
            </tr>
        </table>
    }
    else
    {
        <table class="table">
            <thead>
                <tr class="esh-table-header">
                    <th></th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Brand</th>
                    <th>Type</th>
                    <th>Price</th>
                    <th>Picture name</th>
                    <th>Stock</th>
                    <th>Restock</th>
                    <th>Max stock</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Data)
                {
                    <tr>
                        <td>
                            <img class="esh-thumbnail" src="/Pics/@item.PictureFileName" />
                        </td>
                        <td>
                            <p>@item.Name</p>
                        </td>
                        <td>
                            <p>@item.Description</p>
                        </td>
                        <td>
                            <p>@item.CatalogBrand.Brand</p>
                        </td>
                        <td>
                            <p>@item.CatalogType.Type</p>
                        </td>
                        <td>
                            <p><span class="esh-price">@item.Price</span></p>
                        </td>
                        <td>
                            <p>@item.PictureFileName</p>
                        </td>
                        <td>
                            <p>@item.AvailableStock</p>
                        </td>
                        <td>
                            <p>@item.RestockThreshold</p>
                        </td>
                        <td>
                            <p>@item.MaxStockThreshold</p>
                        </td>
                        <td>
                            <a href="@GetRouteUrl("EditProduct", new { id = item.Id })" class="esh-table-link">
                                Edit
                            </a>
                            |
                            <a href="@GetRouteUrl("ProductDetails", new { id = item.Id })" class="esh-table-link">
                                Details
                            </a>
                            |
                            <a href="@GetRouteUrl("DeleteProduct", new { id = item.Id })" class="esh-table-link">
                                Delete
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div class="esh-pager">
    <div class="container">
        <article class="esh-pager-wrapper row">
            <nav>
                <a href="@GetRouteUrl("ProductsByPage", new { index = Model.ActualPage - 1, size = Model.ItemsPerPage })" 
                   class="esh-pager-item esh-pager-item--navigable @(Model.ActualPage > 0 ? "" : "esh-pager-item--hidden")">
                    Previous
                </a>

                <span class="esh-pager-item">Showing @Model.ItemsPerPage of @Model.TotalItems products - Page @(Model.ActualPage + 1) - @Model.TotalPages</span>

                <a href="@GetRouteUrl("ProductsByPage", new { index = Model.ActualPage + 1, size = Model.ItemsPerPage })" 
                   class="esh-pager-item esh-pager-item--navigable @(Model.ActualPage < Model.TotalPages - 1 ? "" : "esh-pager-item--hidden")">
                    Next
                </a>
            </nav>
        </article>
    </div>
</div>

@code {
    public const int DefaultPageIndex = 0;
    public const int DefaultPageSize = 10;

    protected PaginatedItemsViewModel<CatalogItem> Model { get; set; }

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        if (PaginationParamsAreSet(queryParams))
        {
            var size = Convert.ToInt32(queryParams["size"]);
            var index = Convert.ToInt32(queryParams["index"]);
            Model = CatalogService.GetCatalogItemsPaginated(size, index);
            Logger.LogInformation($"Now loading... /?size={size}&index={index}");
        }
        else
        {
            Model = CatalogService.GetCatalogItemsPaginated(DefaultPageSize, DefaultPageIndex);
            Logger.LogInformation($"Now loading... /?size={DefaultPageSize}&index={DefaultPageIndex}");
        }
    }

    private bool PaginationParamsAreSet(System.Collections.Specialized.NameValueCollection queryParams)
    {
        return !string.IsNullOrEmpty(queryParams["size"]) && !string.IsNullOrEmpty(queryParams["index"]);
    }

    private string GetRouteUrl(string routeName, object routeValues)
    {
        // Simplified route URL generation for Blazor
        if (routeName == "ProductsByPage")
        {
            var values = (dynamic)routeValues;
            return NavigationManager.GetUriWithQueryParameters("", new Dictionary<string, object>
            {
                ["index"] = values.index,
                ["size"] = values.size
            });
        }
        else if (routeName == "EditProduct" || routeName == "ProductDetails" || routeName == "DeleteProduct")
        {
            var values = (dynamic)routeValues;
            string path = routeName switch
            {
                "EditProduct" => "EditProduct",
                "ProductDetails" => "ProductDetails",
                "DeleteProduct" => "DeleteProduct",
                _ => ""
            };
            
            return $"/{path}/{values.id}";
        }
        
        return "";
    }
}